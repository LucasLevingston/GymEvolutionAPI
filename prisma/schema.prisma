generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                   String    @id @default(uuid())
  email                String    @unique
  password             String
  name                 String?
  sex                  String?
  street               String?
  number               String?
  zipCode              String?
  city                 String?
  state                String?
  birthDate            String?
  phone                String?
  currentWeight        String?
  currentBf            String?
  resetPasswordToken   String?
  height               String?
  resetPasswordExpires DateTime?
  role                 String    @default("STUDENT")
  useGooglePicture     Boolean   @default(false)

  bio            String?
  experience     Int?
  rating         Float?
  imageUrl       String?
  specialties    String?
  certifications String?
  education      String?
  availability   String?
  reviews        String?

  plans                  Plan[]    @relation("ProfessionalToPlans")
  meetingsAsProfessional Meeting[] @relation("ProfessionalToMeetings")
  meetingsAsStudent      Meeting[] @relation("StudentToMeetings")

  history       History[]
  oldWeights    Weight[]
  trainingWeeks TrainingWeek[]
  diets         Diet[]
  Notification  Notification[]

  studentsAsNutritionist Relationship[] @relation("NutritionistToStudent")
  studentsAsTrainer      Relationship[] @relation("TrainerToStudent")
  nutritionistRelation   Relationship?  @relation("StudentToNutritionist")
  trainerRelation        Relationship?  @relation("StudentToTrainer")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  purchasesAsBuyer        Purchase[]            @relation("BuyerToPurchase")
  purchasesAsProfessional Purchase[]            @relation("ProfessionalToPurchase")
  Purchase                Purchase[]
  googleRefreshToken      String?
  googleAccessToken       String?
  GoogleConnection        GoogleConnection?
  ProfessionalSettings    ProfessionalSettings?

  @@map("users")
}

model ProfessionalSettings {
  id                  String   @id @default(cuid())
  userId              String   @unique
  workStartHour       Int      @default(9)
  workEndHour         Int      @default(17)
  appointmentDuration Int      @default(60)
  workDays            String   @default("1,2,3,4,5") // Comma-separated days: 0 = Sunday, 1 = Monday, etc.
  timeZone            String   @default("America/Sao_Paulo")
  bufferBetweenSlots  Int      @default(0) // Buffer time in minutes between appointments
  maxAdvanceBooking   Int      @default(30) // Maximum days in advance for booking
  autoAcceptMeetings  Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id])

  @@map("professionalSettings")
}

model GoogleConnection {
  id           String    @id @default(cuid())
  userId       String    @unique
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  scope        String?
  tokenType    String    @default("Bearer")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Plan {
  id          String  @id @default(uuid())
  name        String
  description String?
  price       Float
  duration    Int
  features    String
  isActive    Boolean @default(true)

  professional   User   @relation("ProfessionalToPlans", fields: [professionalId], references: [id])
  professionalId String

  purchases Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("plans")
}

model Relationship {
  id String @id @default(uuid())

  nutritionist   User?   @relation("NutritionistToStudent", fields: [nutritionistId], references: [id])
  nutritionistId String?
  student        User?   @relation("StudentToNutritionist", fields: [studentId], references: [id], onDelete: SetNull)
  studentId      String? @unique

  trainer    User?   @relation("TrainerToStudent", fields: [trainerId], references: [id])
  trainerId  String?
  student2   User?   @relation("StudentToTrainer", fields: [student2Id], references: [id], onDelete: SetNull)
  student2Id String? @unique

  status    String    @default("PENDING")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Purchase  Purchase?

  @@map("relationships")
}

model History {
  id        String   @id @default(uuid())
  event     String
  date      String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@map("histories")
}

model Weight {
  id        String   @id @default(uuid())
  weight    String
  date      String
  bf        String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@map("weights")
}

model TrainingWeek {
  id           String        @id @default(uuid())
  weekNumber   Int
  trainingDays TrainingDay[]
  startDate    DateTime
  endDate      DateTime
  information  String?
  isCompleted  Boolean       @default(false)
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("trainingWeeks")
}

model TrainingDay {
  id          String  @id @default(uuid())
  group       String
  dayOfWeek   String
  isCompleted Boolean @default(false)
  comments    String?

  trainingWeek   TrainingWeek? @relation(fields: [trainingWeekId], references: [id], onDelete: Cascade)
  trainingWeekId String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  trainingDayId  String?
  exercises      Exercise[]

  @@map("trainingDays")
}

model Exercise {
  id            String       @id @default(uuid())
  name          String
  variation     String?
  repetitions   Int
  sets          Int
  isCompleted   Boolean      @default(false)
  seriesResults Serie[]
  trainingDay   TrainingDay? @relation(fields: [trainingDayId], references: [id])
  trainingDayId String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@map("exercises")
}

model Serie {
  id          String    @id @default(uuid())
  seriesIndex Int?
  repetitions Int?
  weight      Int?
  exercise    Exercise? @relation(fields: [exerciseId], references: [id])
  exerciseId  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("series")
}

model Diet {
  id                 String  @id @default(uuid())
  weekNumber         Int
  meals              Meal[]
  totalCalories      Int?
  totalProtein       Float?
  totalCarbohydrates Float?
  totalFat           Float?
  isCurrent          Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?

  @@map("diets")
}

model Meal {
  id            String      @id @default(uuid())
  name          String?
  calories      Int?
  protein       Float?
  carbohydrates Float?
  fat           Float?
  mealType      String?
  day           Int?
  hour          String?
  isCompleted   Boolean?    @default(false)
  mealItems     MealItems[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  Diet          Diet?       @relation(fields: [dietId], references: [id])
  dietId        String?

  @@map("meals")
}

model MealItems {
  id            String  @id @default(uuid())
  name          String
  quantity      Int
  quantityType  String  @default("g")
  calories      Int?
  protein       Float?
  carbohydrates Float?
  fat           Float?
  isCompleted   Boolean @default(false)

  isSubstitution Boolean     @default(false)
  originalItem   MealItems?  @relation("ItemSubstitutions", fields: [originalItemId], references: [id])
  originalItemId String?
  substitutions  MealItems[] @relation("ItemSubstitutions")

  Meal      Meal?    @relation(fields: [mealId], references: [id])
  mealId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("mealItems")
}

model Notification {
  id        String   @id @default(uuid())
  title     String
  message   String
  type      String
  read      Boolean  @default(false)
  link      String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notifications")
}

model Purchase {
  id String @id @default(uuid())

  buyer          User   @relation("BuyerToPurchase", fields: [buyerId], references: [id])
  buyerId        String
  professional   User   @relation("ProfessionalToPurchase", fields: [professionalId], references: [id])
  professionalId String

  planId        String
  amount        Float
  paymentStatus String  @default("PENDING")
  paymentMethod String?
  paymentId     String?

  status String @default("WAITINGPAYMENT")

  cancelReason  String?
  cancelComment String?
  cancelledAt   DateTime?

  relationship   Relationship? @relation(fields: [relationshipId], references: [id])
  relationshipId String?       @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  User      User?     @relation(fields: [userId], references: [id])
  userId    String?
  Plan      Plan      @relation(fields: [planId], references: [id])
  Meeting   Meeting[]

  @@map("purchases")
}

model Meeting {
  id          String   @id @default(uuid())
  title       String
  description String?
  meetLink    String?
  meetingCode String?
  startTime   DateTime
  endTime     DateTime
  status      String   @default("SCHEDULED")

  professional   User   @relation("ProfessionalToMeetings", fields: [professionalId], references: [id])
  professionalId String
  student        User   @relation("StudentToMeetings", fields: [studentId], references: [id])
  studentId      String

  purchase   Purchase? @relation(fields: [purchaseId], references: [id])
  purchaseId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("meetings")
}
